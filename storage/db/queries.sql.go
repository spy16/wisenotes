// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :exec
INSERT INTO profile (name, emoji) VALUES (?, ?)
`

type CreateProfileParams struct {
	Name  string
	Emoji string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.ExecContext(ctx, createProfile, arg.Name, arg.Emoji)
	return err
}

const getArticles = `-- name: GetArticles :many
SELECT id, profile_id, title, kind, spec, content, version, created_at, updated_at FROM article WHERE profile_id=? ORDER BY created_at DESC
`

func (q *Queries) GetArticles(ctx context.Context, profileID int64) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getArticles, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Title,
			&i.Kind,
			&i.Spec,
			&i.Content,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfig = `-- name: GetConfig :one
SELECT "key", value, created_at, updated_at FROM config WHERE key = ?
`

func (q *Queries) GetConfig(ctx context.Context, key string) (Config, error) {
	row := q.db.QueryRowContext(ctx, getConfig, key)
	var i Config
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByName = `-- name: GetProfileByName :one
SELECT id, name, emoji, created_at, updated_at FROM profile WHERE name = ?
`

func (q *Queries) GetProfileByName(ctx context.Context, name string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByName, name)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emoji,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
SELECT id, name, emoji, created_at, updated_at FROM profile ORDER BY name ASC
`

func (q *Queries) GetProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Emoji,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setConfig = `-- name: SetConfig :exec
INSERT INTO config (key, value) VALUES (?1, ?2)
ON CONFLICT(key) DO UPDATE SET value = sqlc.arg(value)
`

type SetConfigParams struct {
	Key   string
	Value sql.NullString
}

func (q *Queries) SetConfig(ctx context.Context, arg SetConfigParams) error {
	_, err := q.db.ExecContext(ctx, setConfig, arg.Key, arg.Value)
	return err
}
